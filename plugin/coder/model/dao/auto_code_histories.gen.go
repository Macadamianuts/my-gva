// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/plugin/coder/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAutoCodeHistory(db *gorm.DB, opts ...gen.DOOption) autoCodeHistory {
	_autoCodeHistory := autoCodeHistory{}

	_autoCodeHistory.autoCodeHistoryDo.UseDB(db, opts...)
	_autoCodeHistory.autoCodeHistoryDo.UseModel(&model.AutoCodeHistory{})

	tableName := _autoCodeHistory.autoCodeHistoryDo.TableName()
	_autoCodeHistory.ALL = field.NewAsterisk(tableName)
	_autoCodeHistory.ID = field.NewUint(tableName, "id")
	_autoCodeHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_autoCodeHistory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_autoCodeHistory.DeletedAt = field.NewTime(tableName, "deleted_at")
	_autoCodeHistory.IsDelete = field.NewField(tableName, "is_delete")
	_autoCodeHistory.Created = field.NewUint64(tableName, "created")
	_autoCodeHistory.Updated = field.NewUint64(tableName, "updated")
	_autoCodeHistory.Deleted = field.NewUint64(tableName, "deleted")
	_autoCodeHistory.Type = field.NewString(tableName, "type")
	_autoCodeHistory.Plugin = field.NewString(tableName, "plugin")
	_autoCodeHistory.Struct = field.NewString(tableName, "struct")
	_autoCodeHistory.Filename = field.NewString(tableName, "filename")
	_autoCodeHistory.TableName_ = field.NewString(tableName, "table_name")
	_autoCodeHistory.Description = field.NewString(tableName, "description")
	_autoCodeHistory.Abbreviation = field.NewString(tableName, "abbreviation")
	_autoCodeHistory.UnderlineName = field.NewString(tableName, "underline_name")
	_autoCodeHistory.AutoMoveFile = field.NewBool(tableName, "auto_move_file")
	_autoCodeHistory.AutoCreateApi = field.NewBool(tableName, "auto_create_api")
	_autoCodeHistory.Fields = autoCodeHistoryHasManyFields{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Fields", "model.AutoCodeHistoryField"),
	}

	_autoCodeHistory.fillFieldMap()

	return _autoCodeHistory
}

type autoCodeHistory struct {
	autoCodeHistoryDo autoCodeHistoryDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Time
	IsDelete      field.Field
	Created       field.Uint64
	Updated       field.Uint64
	Deleted       field.Uint64
	Type          field.String
	Plugin        field.String
	Struct        field.String
	Filename      field.String
	TableName_    field.String
	Description   field.String
	Abbreviation  field.String
	UnderlineName field.String
	AutoMoveFile  field.Bool
	AutoCreateApi field.Bool
	Fields        autoCodeHistoryHasManyFields

	fieldMap map[string]field.Expr
}

func (a autoCodeHistory) Table(newTableName string) *autoCodeHistory {
	a.autoCodeHistoryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoCodeHistory) As(alias string) *autoCodeHistory {
	a.autoCodeHistoryDo.DO = *(a.autoCodeHistoryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoCodeHistory) updateTableName(table string) *autoCodeHistory {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewTime(table, "deleted_at")
	a.IsDelete = field.NewField(table, "is_delete")
	a.Created = field.NewUint64(table, "created")
	a.Updated = field.NewUint64(table, "updated")
	a.Deleted = field.NewUint64(table, "deleted")
	a.Type = field.NewString(table, "type")
	a.Plugin = field.NewString(table, "plugin")
	a.Struct = field.NewString(table, "struct")
	a.Filename = field.NewString(table, "filename")
	a.TableName_ = field.NewString(table, "table_name")
	a.Description = field.NewString(table, "description")
	a.Abbreviation = field.NewString(table, "abbreviation")
	a.UnderlineName = field.NewString(table, "underline_name")
	a.AutoMoveFile = field.NewBool(table, "auto_move_file")
	a.AutoCreateApi = field.NewBool(table, "auto_create_api")

	a.fillFieldMap()

	return a
}

func (a *autoCodeHistory) WithContext(ctx context.Context) IAutoCodeHistoryDo {
	return a.autoCodeHistoryDo.WithContext(ctx)
}

func (a autoCodeHistory) TableName() string { return a.autoCodeHistoryDo.TableName() }

func (a autoCodeHistory) Alias() string { return a.autoCodeHistoryDo.Alias() }

func (a *autoCodeHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoCodeHistory) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 19)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["is_delete"] = a.IsDelete
	a.fieldMap["created"] = a.Created
	a.fieldMap["updated"] = a.Updated
	a.fieldMap["deleted"] = a.Deleted
	a.fieldMap["type"] = a.Type
	a.fieldMap["plugin"] = a.Plugin
	a.fieldMap["struct"] = a.Struct
	a.fieldMap["filename"] = a.Filename
	a.fieldMap["table_name"] = a.TableName_
	a.fieldMap["description"] = a.Description
	a.fieldMap["abbreviation"] = a.Abbreviation
	a.fieldMap["underline_name"] = a.UnderlineName
	a.fieldMap["auto_move_file"] = a.AutoMoveFile
	a.fieldMap["auto_create_api"] = a.AutoCreateApi

}

func (a autoCodeHistory) clone(db *gorm.DB) autoCodeHistory {
	a.autoCodeHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoCodeHistory) replaceDB(db *gorm.DB) autoCodeHistory {
	a.autoCodeHistoryDo.ReplaceDB(db)
	return a
}

type autoCodeHistoryHasManyFields struct {
	db *gorm.DB

	field.RelationField
}

func (a autoCodeHistoryHasManyFields) Where(conds ...field.Expr) *autoCodeHistoryHasManyFields {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a autoCodeHistoryHasManyFields) WithContext(ctx context.Context) *autoCodeHistoryHasManyFields {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a autoCodeHistoryHasManyFields) Model(m *model.AutoCodeHistory) *autoCodeHistoryHasManyFieldsTx {
	return &autoCodeHistoryHasManyFieldsTx{a.db.Model(m).Association(a.Name())}
}

type autoCodeHistoryHasManyFieldsTx struct{ tx *gorm.Association }

func (a autoCodeHistoryHasManyFieldsTx) Find() (result []*model.AutoCodeHistoryField, err error) {
	return result, a.tx.Find(&result)
}

func (a autoCodeHistoryHasManyFieldsTx) Append(values ...*model.AutoCodeHistoryField) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a autoCodeHistoryHasManyFieldsTx) Replace(values ...*model.AutoCodeHistoryField) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a autoCodeHistoryHasManyFieldsTx) Delete(values ...*model.AutoCodeHistoryField) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a autoCodeHistoryHasManyFieldsTx) Clear() error {
	return a.tx.Clear()
}

func (a autoCodeHistoryHasManyFieldsTx) Count() int64 {
	return a.tx.Count()
}

type autoCodeHistoryDo struct{ gen.DO }

type IAutoCodeHistoryDo interface {
	gen.SubQuery
	Debug() IAutoCodeHistoryDo
	WithContext(ctx context.Context) IAutoCodeHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoCodeHistoryDo
	WriteDB() IAutoCodeHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoCodeHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoCodeHistoryDo
	Not(conds ...gen.Condition) IAutoCodeHistoryDo
	Or(conds ...gen.Condition) IAutoCodeHistoryDo
	Select(conds ...field.Expr) IAutoCodeHistoryDo
	Where(conds ...gen.Condition) IAutoCodeHistoryDo
	Order(conds ...field.Expr) IAutoCodeHistoryDo
	Distinct(cols ...field.Expr) IAutoCodeHistoryDo
	Omit(cols ...field.Expr) IAutoCodeHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IAutoCodeHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCodeHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoCodeHistoryDo
	Group(cols ...field.Expr) IAutoCodeHistoryDo
	Having(conds ...gen.Condition) IAutoCodeHistoryDo
	Limit(limit int) IAutoCodeHistoryDo
	Offset(offset int) IAutoCodeHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCodeHistoryDo
	Unscoped() IAutoCodeHistoryDo
	Create(values ...*model.AutoCodeHistory) error
	CreateInBatches(values []*model.AutoCodeHistory, batchSize int) error
	Save(values ...*model.AutoCodeHistory) error
	First() (*model.AutoCodeHistory, error)
	Take() (*model.AutoCodeHistory, error)
	Last() (*model.AutoCodeHistory, error)
	Find() ([]*model.AutoCodeHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCodeHistory, err error)
	FindInBatches(result *[]*model.AutoCodeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoCodeHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoCodeHistoryDo
	Assign(attrs ...field.AssignExpr) IAutoCodeHistoryDo
	Joins(fields ...field.RelationField) IAutoCodeHistoryDo
	Preload(fields ...field.RelationField) IAutoCodeHistoryDo
	FirstOrInit() (*model.AutoCodeHistory, error)
	FirstOrCreate() (*model.AutoCodeHistory, error)
	FindByPage(offset int, limit int) (result []*model.AutoCodeHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoCodeHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoCodeHistoryDo) Debug() IAutoCodeHistoryDo {
	return a.withDO(a.DO.Debug())
}

func (a autoCodeHistoryDo) WithContext(ctx context.Context) IAutoCodeHistoryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoCodeHistoryDo) ReadDB() IAutoCodeHistoryDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoCodeHistoryDo) WriteDB() IAutoCodeHistoryDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoCodeHistoryDo) Session(config *gorm.Session) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoCodeHistoryDo) Clauses(conds ...clause.Expression) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoCodeHistoryDo) Returning(value interface{}, columns ...string) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoCodeHistoryDo) Not(conds ...gen.Condition) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoCodeHistoryDo) Or(conds ...gen.Condition) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoCodeHistoryDo) Select(conds ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoCodeHistoryDo) Where(conds ...gen.Condition) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoCodeHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAutoCodeHistoryDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoCodeHistoryDo) Order(conds ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoCodeHistoryDo) Distinct(cols ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoCodeHistoryDo) Omit(cols ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoCodeHistoryDo) Join(table schema.Tabler, on ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoCodeHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoCodeHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoCodeHistoryDo) Group(cols ...field.Expr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoCodeHistoryDo) Having(conds ...gen.Condition) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoCodeHistoryDo) Limit(limit int) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoCodeHistoryDo) Offset(offset int) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoCodeHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoCodeHistoryDo) Unscoped() IAutoCodeHistoryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoCodeHistoryDo) Create(values ...*model.AutoCodeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoCodeHistoryDo) CreateInBatches(values []*model.AutoCodeHistory, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoCodeHistoryDo) Save(values ...*model.AutoCodeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoCodeHistoryDo) First() (*model.AutoCodeHistory, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCodeHistory), nil
	}
}

func (a autoCodeHistoryDo) Take() (*model.AutoCodeHistory, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCodeHistory), nil
	}
}

func (a autoCodeHistoryDo) Last() (*model.AutoCodeHistory, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCodeHistory), nil
	}
}

func (a autoCodeHistoryDo) Find() ([]*model.AutoCodeHistory, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoCodeHistory), err
}

func (a autoCodeHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCodeHistory, err error) {
	buf := make([]*model.AutoCodeHistory, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoCodeHistoryDo) FindInBatches(result *[]*model.AutoCodeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoCodeHistoryDo) Attrs(attrs ...field.AssignExpr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoCodeHistoryDo) Assign(attrs ...field.AssignExpr) IAutoCodeHistoryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoCodeHistoryDo) Joins(fields ...field.RelationField) IAutoCodeHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoCodeHistoryDo) Preload(fields ...field.RelationField) IAutoCodeHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoCodeHistoryDo) FirstOrInit() (*model.AutoCodeHistory, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCodeHistory), nil
	}
}

func (a autoCodeHistoryDo) FirstOrCreate() (*model.AutoCodeHistory, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCodeHistory), nil
	}
}

func (a autoCodeHistoryDo) FindByPage(offset int, limit int) (result []*model.AutoCodeHistory, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoCodeHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoCodeHistoryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoCodeHistoryDo) Delete(models ...*model.AutoCodeHistory) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoCodeHistoryDo) withDO(do gen.Dao) *autoCodeHistoryDo {
	a.DO = *do.(*gen.DO)
	return a
}
