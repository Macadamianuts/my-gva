// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/app/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCasbin(db *gorm.DB, opts ...gen.DOOption) casbin {
	_casbin := casbin{}

	_casbin.casbinDo.UseDB(db, opts...)
	_casbin.casbinDo.UseModel(&model.Casbin{})

	tableName := _casbin.casbinDo.TableName()
	_casbin.ALL = field.NewAsterisk(tableName)
	_casbin.Path = field.NewString(tableName, "v2")
	_casbin.RoleId = field.NewString(tableName, "v1")
	_casbin.Method = field.NewString(tableName, "v3")

	_casbin.fillFieldMap()

	return _casbin
}

type casbin struct {
	casbinDo casbinDo

	ALL    field.Asterisk
	Path   field.String
	RoleId field.String
	Method field.String

	fieldMap map[string]field.Expr
}

func (c casbin) Table(newTableName string) *casbin {
	c.casbinDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c casbin) As(alias string) *casbin {
	c.casbinDo.DO = *(c.casbinDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *casbin) updateTableName(table string) *casbin {
	c.ALL = field.NewAsterisk(table)
	c.Path = field.NewString(table, "v2")
	c.RoleId = field.NewString(table, "v1")
	c.Method = field.NewString(table, "v3")

	c.fillFieldMap()

	return c
}

func (c *casbin) WithContext(ctx context.Context) ICasbinDo { return c.casbinDo.WithContext(ctx) }

func (c casbin) TableName() string { return c.casbinDo.TableName() }

func (c casbin) Alias() string { return c.casbinDo.Alias() }

func (c *casbin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *casbin) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["v2"] = c.Path
	c.fieldMap["v1"] = c.RoleId
	c.fieldMap["v3"] = c.Method
}

func (c casbin) clone(db *gorm.DB) casbin {
	c.casbinDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c casbin) replaceDB(db *gorm.DB) casbin {
	c.casbinDo.ReplaceDB(db)
	return c
}

type casbinDo struct{ gen.DO }

type ICasbinDo interface {
	gen.SubQuery
	Debug() ICasbinDo
	WithContext(ctx context.Context) ICasbinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICasbinDo
	WriteDB() ICasbinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICasbinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICasbinDo
	Not(conds ...gen.Condition) ICasbinDo
	Or(conds ...gen.Condition) ICasbinDo
	Select(conds ...field.Expr) ICasbinDo
	Where(conds ...gen.Condition) ICasbinDo
	Order(conds ...field.Expr) ICasbinDo
	Distinct(cols ...field.Expr) ICasbinDo
	Omit(cols ...field.Expr) ICasbinDo
	Join(table schema.Tabler, on ...field.Expr) ICasbinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICasbinDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICasbinDo
	Group(cols ...field.Expr) ICasbinDo
	Having(conds ...gen.Condition) ICasbinDo
	Limit(limit int) ICasbinDo
	Offset(offset int) ICasbinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICasbinDo
	Unscoped() ICasbinDo
	Create(values ...*model.Casbin) error
	CreateInBatches(values []*model.Casbin, batchSize int) error
	Save(values ...*model.Casbin) error
	First() (*model.Casbin, error)
	Take() (*model.Casbin, error)
	Last() (*model.Casbin, error)
	Find() ([]*model.Casbin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Casbin, err error)
	FindInBatches(result *[]*model.Casbin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Casbin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICasbinDo
	Assign(attrs ...field.AssignExpr) ICasbinDo
	Joins(fields ...field.RelationField) ICasbinDo
	Preload(fields ...field.RelationField) ICasbinDo
	FirstOrInit() (*model.Casbin, error)
	FirstOrCreate() (*model.Casbin, error)
	FindByPage(offset int, limit int) (result []*model.Casbin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICasbinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c casbinDo) Debug() ICasbinDo {
	return c.withDO(c.DO.Debug())
}

func (c casbinDo) WithContext(ctx context.Context) ICasbinDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c casbinDo) ReadDB() ICasbinDo {
	return c.Clauses(dbresolver.Read)
}

func (c casbinDo) WriteDB() ICasbinDo {
	return c.Clauses(dbresolver.Write)
}

func (c casbinDo) Session(config *gorm.Session) ICasbinDo {
	return c.withDO(c.DO.Session(config))
}

func (c casbinDo) Clauses(conds ...clause.Expression) ICasbinDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c casbinDo) Returning(value interface{}, columns ...string) ICasbinDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c casbinDo) Not(conds ...gen.Condition) ICasbinDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c casbinDo) Or(conds ...gen.Condition) ICasbinDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c casbinDo) Select(conds ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c casbinDo) Where(conds ...gen.Condition) ICasbinDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c casbinDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICasbinDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c casbinDo) Order(conds ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c casbinDo) Distinct(cols ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c casbinDo) Omit(cols ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c casbinDo) Join(table schema.Tabler, on ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c casbinDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c casbinDo) RightJoin(table schema.Tabler, on ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c casbinDo) Group(cols ...field.Expr) ICasbinDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c casbinDo) Having(conds ...gen.Condition) ICasbinDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c casbinDo) Limit(limit int) ICasbinDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c casbinDo) Offset(offset int) ICasbinDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c casbinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICasbinDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c casbinDo) Unscoped() ICasbinDo {
	return c.withDO(c.DO.Unscoped())
}

func (c casbinDo) Create(values ...*model.Casbin) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c casbinDo) CreateInBatches(values []*model.Casbin, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c casbinDo) Save(values ...*model.Casbin) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c casbinDo) First() (*model.Casbin, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) Take() (*model.Casbin, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) Last() (*model.Casbin, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) Find() ([]*model.Casbin, error) {
	result, err := c.DO.Find()
	return result.([]*model.Casbin), err
}

func (c casbinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Casbin, err error) {
	buf := make([]*model.Casbin, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c casbinDo) FindInBatches(result *[]*model.Casbin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c casbinDo) Attrs(attrs ...field.AssignExpr) ICasbinDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c casbinDo) Assign(attrs ...field.AssignExpr) ICasbinDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c casbinDo) Joins(fields ...field.RelationField) ICasbinDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c casbinDo) Preload(fields ...field.RelationField) ICasbinDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c casbinDo) FirstOrInit() (*model.Casbin, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) FirstOrCreate() (*model.Casbin, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) FindByPage(offset int, limit int) (result []*model.Casbin, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c casbinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c casbinDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c casbinDo) Delete(models ...*model.Casbin) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *casbinDo) withDO(do gen.Dao) *casbinDo {
	c.DO = *do.(*gen.DO)
	return c
}
