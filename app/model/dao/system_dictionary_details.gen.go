// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/app/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDictionaryDetail(db *gorm.DB, opts ...gen.DOOption) dictionaryDetail {
	_dictionaryDetail := dictionaryDetail{}

	_dictionaryDetail.dictionaryDetailDo.UseDB(db, opts...)
	_dictionaryDetail.dictionaryDetailDo.UseModel(&model.DictionaryDetail{})

	tableName := _dictionaryDetail.dictionaryDetailDo.TableName()
	_dictionaryDetail.ALL = field.NewAsterisk(tableName)
	_dictionaryDetail.ID = field.NewUint(tableName, "id")
	_dictionaryDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_dictionaryDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dictionaryDetail.DeletedAt = field.NewTime(tableName, "deleted_at")
	_dictionaryDetail.IsDelete = field.NewField(tableName, "is_delete")
	_dictionaryDetail.Created = field.NewUint64(tableName, "created")
	_dictionaryDetail.Updated = field.NewUint64(tableName, "updated")
	_dictionaryDetail.Deleted = field.NewUint64(tableName, "deleted")
	_dictionaryDetail.Label = field.NewString(tableName, "label")
	_dictionaryDetail.Sort = field.NewInt(tableName, "sort")
	_dictionaryDetail.Value = field.NewInt(tableName, "value")
	_dictionaryDetail.Status = field.NewBool(tableName, "status")
	_dictionaryDetail.DictionaryId = field.NewUint(tableName, "dictionary_id")

	_dictionaryDetail.fillFieldMap()

	return _dictionaryDetail
}

type dictionaryDetail struct {
	dictionaryDetailDo dictionaryDetailDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Time
	IsDelete     field.Field
	Created      field.Uint64
	Updated      field.Uint64
	Deleted      field.Uint64
	Label        field.String
	Sort         field.Int
	Value        field.Int
	Status       field.Bool
	DictionaryId field.Uint

	fieldMap map[string]field.Expr
}

func (d dictionaryDetail) Table(newTableName string) *dictionaryDetail {
	d.dictionaryDetailDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictionaryDetail) As(alias string) *dictionaryDetail {
	d.dictionaryDetailDo.DO = *(d.dictionaryDetailDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictionaryDetail) updateTableName(table string) *dictionaryDetail {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewTime(table, "deleted_at")
	d.IsDelete = field.NewField(table, "is_delete")
	d.Created = field.NewUint64(table, "created")
	d.Updated = field.NewUint64(table, "updated")
	d.Deleted = field.NewUint64(table, "deleted")
	d.Label = field.NewString(table, "label")
	d.Sort = field.NewInt(table, "sort")
	d.Value = field.NewInt(table, "value")
	d.Status = field.NewBool(table, "status")
	d.DictionaryId = field.NewUint(table, "dictionary_id")

	d.fillFieldMap()

	return d
}

func (d *dictionaryDetail) WithContext(ctx context.Context) IDictionaryDetailDo {
	return d.dictionaryDetailDo.WithContext(ctx)
}

func (d dictionaryDetail) TableName() string { return d.dictionaryDetailDo.TableName() }

func (d dictionaryDetail) Alias() string { return d.dictionaryDetailDo.Alias() }

func (d *dictionaryDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictionaryDetail) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["is_delete"] = d.IsDelete
	d.fieldMap["created"] = d.Created
	d.fieldMap["updated"] = d.Updated
	d.fieldMap["deleted"] = d.Deleted
	d.fieldMap["label"] = d.Label
	d.fieldMap["sort"] = d.Sort
	d.fieldMap["value"] = d.Value
	d.fieldMap["status"] = d.Status
	d.fieldMap["dictionary_id"] = d.DictionaryId
}

func (d dictionaryDetail) clone(db *gorm.DB) dictionaryDetail {
	d.dictionaryDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictionaryDetail) replaceDB(db *gorm.DB) dictionaryDetail {
	d.dictionaryDetailDo.ReplaceDB(db)
	return d
}

type dictionaryDetailDo struct{ gen.DO }

type IDictionaryDetailDo interface {
	gen.SubQuery
	Debug() IDictionaryDetailDo
	WithContext(ctx context.Context) IDictionaryDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDictionaryDetailDo
	WriteDB() IDictionaryDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDictionaryDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDictionaryDetailDo
	Not(conds ...gen.Condition) IDictionaryDetailDo
	Or(conds ...gen.Condition) IDictionaryDetailDo
	Select(conds ...field.Expr) IDictionaryDetailDo
	Where(conds ...gen.Condition) IDictionaryDetailDo
	Order(conds ...field.Expr) IDictionaryDetailDo
	Distinct(cols ...field.Expr) IDictionaryDetailDo
	Omit(cols ...field.Expr) IDictionaryDetailDo
	Join(table schema.Tabler, on ...field.Expr) IDictionaryDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDictionaryDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDictionaryDetailDo
	Group(cols ...field.Expr) IDictionaryDetailDo
	Having(conds ...gen.Condition) IDictionaryDetailDo
	Limit(limit int) IDictionaryDetailDo
	Offset(offset int) IDictionaryDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDictionaryDetailDo
	Unscoped() IDictionaryDetailDo
	Create(values ...*model.DictionaryDetail) error
	CreateInBatches(values []*model.DictionaryDetail, batchSize int) error
	Save(values ...*model.DictionaryDetail) error
	First() (*model.DictionaryDetail, error)
	Take() (*model.DictionaryDetail, error)
	Last() (*model.DictionaryDetail, error)
	Find() ([]*model.DictionaryDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictionaryDetail, err error)
	FindInBatches(result *[]*model.DictionaryDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DictionaryDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDictionaryDetailDo
	Assign(attrs ...field.AssignExpr) IDictionaryDetailDo
	Joins(fields ...field.RelationField) IDictionaryDetailDo
	Preload(fields ...field.RelationField) IDictionaryDetailDo
	FirstOrInit() (*model.DictionaryDetail, error)
	FirstOrCreate() (*model.DictionaryDetail, error)
	FindByPage(offset int, limit int) (result []*model.DictionaryDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDictionaryDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dictionaryDetailDo) Debug() IDictionaryDetailDo {
	return d.withDO(d.DO.Debug())
}

func (d dictionaryDetailDo) WithContext(ctx context.Context) IDictionaryDetailDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictionaryDetailDo) ReadDB() IDictionaryDetailDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictionaryDetailDo) WriteDB() IDictionaryDetailDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictionaryDetailDo) Session(config *gorm.Session) IDictionaryDetailDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictionaryDetailDo) Clauses(conds ...clause.Expression) IDictionaryDetailDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictionaryDetailDo) Returning(value interface{}, columns ...string) IDictionaryDetailDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictionaryDetailDo) Not(conds ...gen.Condition) IDictionaryDetailDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictionaryDetailDo) Or(conds ...gen.Condition) IDictionaryDetailDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictionaryDetailDo) Select(conds ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictionaryDetailDo) Where(conds ...gen.Condition) IDictionaryDetailDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictionaryDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDictionaryDetailDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dictionaryDetailDo) Order(conds ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictionaryDetailDo) Distinct(cols ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictionaryDetailDo) Omit(cols ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictionaryDetailDo) Join(table schema.Tabler, on ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictionaryDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictionaryDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictionaryDetailDo) Group(cols ...field.Expr) IDictionaryDetailDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictionaryDetailDo) Having(conds ...gen.Condition) IDictionaryDetailDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictionaryDetailDo) Limit(limit int) IDictionaryDetailDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictionaryDetailDo) Offset(offset int) IDictionaryDetailDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictionaryDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDictionaryDetailDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictionaryDetailDo) Unscoped() IDictionaryDetailDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictionaryDetailDo) Create(values ...*model.DictionaryDetail) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictionaryDetailDo) CreateInBatches(values []*model.DictionaryDetail, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictionaryDetailDo) Save(values ...*model.DictionaryDetail) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictionaryDetailDo) First() (*model.DictionaryDetail, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictionaryDetail), nil
	}
}

func (d dictionaryDetailDo) Take() (*model.DictionaryDetail, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictionaryDetail), nil
	}
}

func (d dictionaryDetailDo) Last() (*model.DictionaryDetail, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictionaryDetail), nil
	}
}

func (d dictionaryDetailDo) Find() ([]*model.DictionaryDetail, error) {
	result, err := d.DO.Find()
	return result.([]*model.DictionaryDetail), err
}

func (d dictionaryDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictionaryDetail, err error) {
	buf := make([]*model.DictionaryDetail, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictionaryDetailDo) FindInBatches(result *[]*model.DictionaryDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictionaryDetailDo) Attrs(attrs ...field.AssignExpr) IDictionaryDetailDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictionaryDetailDo) Assign(attrs ...field.AssignExpr) IDictionaryDetailDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictionaryDetailDo) Joins(fields ...field.RelationField) IDictionaryDetailDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictionaryDetailDo) Preload(fields ...field.RelationField) IDictionaryDetailDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictionaryDetailDo) FirstOrInit() (*model.DictionaryDetail, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictionaryDetail), nil
	}
}

func (d dictionaryDetailDo) FirstOrCreate() (*model.DictionaryDetail, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictionaryDetail), nil
	}
}

func (d dictionaryDetailDo) FindByPage(offset int, limit int) (result []*model.DictionaryDetail, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictionaryDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictionaryDetailDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictionaryDetailDo) Delete(models ...*model.DictionaryDetail) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictionaryDetailDo) withDO(do gen.Dao) *dictionaryDetailDo {
	d.DO = *do.(*gen.DO)
	return d
}
