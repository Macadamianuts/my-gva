// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/app/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDictionary(db *gorm.DB, opts ...gen.DOOption) dictionary {
	_dictionary := dictionary{}

	_dictionary.dictionaryDo.UseDB(db, opts...)
	_dictionary.dictionaryDo.UseModel(&model.Dictionary{})

	tableName := _dictionary.dictionaryDo.TableName()
	_dictionary.ALL = field.NewAsterisk(tableName)
	_dictionary.ID = field.NewUint(tableName, "id")
	_dictionary.CreatedAt = field.NewTime(tableName, "created_at")
	_dictionary.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dictionary.DeletedAt = field.NewTime(tableName, "deleted_at")
	_dictionary.IsDelete = field.NewField(tableName, "is_delete")
	_dictionary.Created = field.NewUint64(tableName, "created")
	_dictionary.Updated = field.NewUint64(tableName, "updated")
	_dictionary.Deleted = field.NewUint64(tableName, "deleted")
	_dictionary.Name = field.NewString(tableName, "name")
	_dictionary.Type = field.NewString(tableName, "type")
	_dictionary.Status = field.NewBool(tableName, "status")
	_dictionary.Description = field.NewString(tableName, "description")
	_dictionary.Details = dictionaryHasManyDetails{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Details", "model.DictionaryDetail"),
	}

	_dictionary.fillFieldMap()

	return _dictionary
}

type dictionary struct {
	dictionaryDo dictionaryDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Time
	IsDelete    field.Field
	Created     field.Uint64
	Updated     field.Uint64
	Deleted     field.Uint64
	Name        field.String
	Type        field.String
	Status      field.Bool
	Description field.String
	Details     dictionaryHasManyDetails

	fieldMap map[string]field.Expr
}

func (d dictionary) Table(newTableName string) *dictionary {
	d.dictionaryDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictionary) As(alias string) *dictionary {
	d.dictionaryDo.DO = *(d.dictionaryDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictionary) updateTableName(table string) *dictionary {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewTime(table, "deleted_at")
	d.IsDelete = field.NewField(table, "is_delete")
	d.Created = field.NewUint64(table, "created")
	d.Updated = field.NewUint64(table, "updated")
	d.Deleted = field.NewUint64(table, "deleted")
	d.Name = field.NewString(table, "name")
	d.Type = field.NewString(table, "type")
	d.Status = field.NewBool(table, "status")
	d.Description = field.NewString(table, "description")

	d.fillFieldMap()

	return d
}

func (d *dictionary) WithContext(ctx context.Context) IDictionaryDo {
	return d.dictionaryDo.WithContext(ctx)
}

func (d dictionary) TableName() string { return d.dictionaryDo.TableName() }

func (d dictionary) Alias() string { return d.dictionaryDo.Alias() }

func (d *dictionary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictionary) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["is_delete"] = d.IsDelete
	d.fieldMap["created"] = d.Created
	d.fieldMap["updated"] = d.Updated
	d.fieldMap["deleted"] = d.Deleted
	d.fieldMap["name"] = d.Name
	d.fieldMap["type"] = d.Type
	d.fieldMap["status"] = d.Status
	d.fieldMap["description"] = d.Description

}

func (d dictionary) clone(db *gorm.DB) dictionary {
	d.dictionaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictionary) replaceDB(db *gorm.DB) dictionary {
	d.dictionaryDo.ReplaceDB(db)
	return d
}

type dictionaryHasManyDetails struct {
	db *gorm.DB

	field.RelationField
}

func (a dictionaryHasManyDetails) Where(conds ...field.Expr) *dictionaryHasManyDetails {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a dictionaryHasManyDetails) WithContext(ctx context.Context) *dictionaryHasManyDetails {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a dictionaryHasManyDetails) Model(m *model.Dictionary) *dictionaryHasManyDetailsTx {
	return &dictionaryHasManyDetailsTx{a.db.Model(m).Association(a.Name())}
}

type dictionaryHasManyDetailsTx struct{ tx *gorm.Association }

func (a dictionaryHasManyDetailsTx) Find() (result []*model.DictionaryDetail, err error) {
	return result, a.tx.Find(&result)
}

func (a dictionaryHasManyDetailsTx) Append(values ...*model.DictionaryDetail) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a dictionaryHasManyDetailsTx) Replace(values ...*model.DictionaryDetail) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a dictionaryHasManyDetailsTx) Delete(values ...*model.DictionaryDetail) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a dictionaryHasManyDetailsTx) Clear() error {
	return a.tx.Clear()
}

func (a dictionaryHasManyDetailsTx) Count() int64 {
	return a.tx.Count()
}

type dictionaryDo struct{ gen.DO }

type IDictionaryDo interface {
	gen.SubQuery
	Debug() IDictionaryDo
	WithContext(ctx context.Context) IDictionaryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDictionaryDo
	WriteDB() IDictionaryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDictionaryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDictionaryDo
	Not(conds ...gen.Condition) IDictionaryDo
	Or(conds ...gen.Condition) IDictionaryDo
	Select(conds ...field.Expr) IDictionaryDo
	Where(conds ...gen.Condition) IDictionaryDo
	Order(conds ...field.Expr) IDictionaryDo
	Distinct(cols ...field.Expr) IDictionaryDo
	Omit(cols ...field.Expr) IDictionaryDo
	Join(table schema.Tabler, on ...field.Expr) IDictionaryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDictionaryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDictionaryDo
	Group(cols ...field.Expr) IDictionaryDo
	Having(conds ...gen.Condition) IDictionaryDo
	Limit(limit int) IDictionaryDo
	Offset(offset int) IDictionaryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDictionaryDo
	Unscoped() IDictionaryDo
	Create(values ...*model.Dictionary) error
	CreateInBatches(values []*model.Dictionary, batchSize int) error
	Save(values ...*model.Dictionary) error
	First() (*model.Dictionary, error)
	Take() (*model.Dictionary, error)
	Last() (*model.Dictionary, error)
	Find() ([]*model.Dictionary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dictionary, err error)
	FindInBatches(result *[]*model.Dictionary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dictionary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDictionaryDo
	Assign(attrs ...field.AssignExpr) IDictionaryDo
	Joins(fields ...field.RelationField) IDictionaryDo
	Preload(fields ...field.RelationField) IDictionaryDo
	FirstOrInit() (*model.Dictionary, error)
	FirstOrCreate() (*model.Dictionary, error)
	FindByPage(offset int, limit int) (result []*model.Dictionary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDictionaryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dictionaryDo) Debug() IDictionaryDo {
	return d.withDO(d.DO.Debug())
}

func (d dictionaryDo) WithContext(ctx context.Context) IDictionaryDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictionaryDo) ReadDB() IDictionaryDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictionaryDo) WriteDB() IDictionaryDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictionaryDo) Session(config *gorm.Session) IDictionaryDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictionaryDo) Clauses(conds ...clause.Expression) IDictionaryDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictionaryDo) Returning(value interface{}, columns ...string) IDictionaryDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictionaryDo) Not(conds ...gen.Condition) IDictionaryDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictionaryDo) Or(conds ...gen.Condition) IDictionaryDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictionaryDo) Select(conds ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictionaryDo) Where(conds ...gen.Condition) IDictionaryDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictionaryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDictionaryDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dictionaryDo) Order(conds ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictionaryDo) Distinct(cols ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictionaryDo) Omit(cols ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictionaryDo) Join(table schema.Tabler, on ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictionaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictionaryDo) RightJoin(table schema.Tabler, on ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictionaryDo) Group(cols ...field.Expr) IDictionaryDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictionaryDo) Having(conds ...gen.Condition) IDictionaryDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictionaryDo) Limit(limit int) IDictionaryDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictionaryDo) Offset(offset int) IDictionaryDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictionaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDictionaryDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictionaryDo) Unscoped() IDictionaryDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictionaryDo) Create(values ...*model.Dictionary) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictionaryDo) CreateInBatches(values []*model.Dictionary, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictionaryDo) Save(values ...*model.Dictionary) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictionaryDo) First() (*model.Dictionary, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) Take() (*model.Dictionary, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) Last() (*model.Dictionary, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) Find() ([]*model.Dictionary, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dictionary), err
}

func (d dictionaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dictionary, err error) {
	buf := make([]*model.Dictionary, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictionaryDo) FindInBatches(result *[]*model.Dictionary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictionaryDo) Attrs(attrs ...field.AssignExpr) IDictionaryDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictionaryDo) Assign(attrs ...field.AssignExpr) IDictionaryDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictionaryDo) Joins(fields ...field.RelationField) IDictionaryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictionaryDo) Preload(fields ...field.RelationField) IDictionaryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictionaryDo) FirstOrInit() (*model.Dictionary, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) FirstOrCreate() (*model.Dictionary, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) FindByPage(offset int, limit int) (result []*model.Dictionary, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictionaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictionaryDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictionaryDo) Delete(models ...*model.Dictionary) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictionaryDo) withDO(do gen.Dao) *dictionaryDo {
	d.DO = *do.(*gen.DO)
	return d
}
