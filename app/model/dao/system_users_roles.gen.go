// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/app/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUsersRoles(db *gorm.DB, opts ...gen.DOOption) usersRoles {
	_usersRoles := usersRoles{}

	_usersRoles.usersRolesDo.UseDB(db, opts...)
	_usersRoles.usersRolesDo.UseModel(&model.UsersRoles{})

	tableName := _usersRoles.usersRolesDo.TableName()
	_usersRoles.ALL = field.NewAsterisk(tableName)
	_usersRoles.UserId = field.NewUint(tableName, "user_id")
	_usersRoles.RoleId = field.NewUint(tableName, "role_id")

	_usersRoles.fillFieldMap()

	return _usersRoles
}

type usersRoles struct {
	usersRolesDo usersRolesDo

	ALL    field.Asterisk
	UserId field.Uint
	RoleId field.Uint

	fieldMap map[string]field.Expr
}

func (u usersRoles) Table(newTableName string) *usersRoles {
	u.usersRolesDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersRoles) As(alias string) *usersRoles {
	u.usersRolesDo.DO = *(u.usersRolesDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersRoles) updateTableName(table string) *usersRoles {
	u.ALL = field.NewAsterisk(table)
	u.UserId = field.NewUint(table, "user_id")
	u.RoleId = field.NewUint(table, "role_id")

	u.fillFieldMap()

	return u
}

func (u *usersRoles) WithContext(ctx context.Context) IUsersRolesDo {
	return u.usersRolesDo.WithContext(ctx)
}

func (u usersRoles) TableName() string { return u.usersRolesDo.TableName() }

func (u usersRoles) Alias() string { return u.usersRolesDo.Alias() }

func (u *usersRoles) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersRoles) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["user_id"] = u.UserId
	u.fieldMap["role_id"] = u.RoleId
}

func (u usersRoles) clone(db *gorm.DB) usersRoles {
	u.usersRolesDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersRoles) replaceDB(db *gorm.DB) usersRoles {
	u.usersRolesDo.ReplaceDB(db)
	return u
}

type usersRolesDo struct{ gen.DO }

type IUsersRolesDo interface {
	gen.SubQuery
	Debug() IUsersRolesDo
	WithContext(ctx context.Context) IUsersRolesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersRolesDo
	WriteDB() IUsersRolesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersRolesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersRolesDo
	Not(conds ...gen.Condition) IUsersRolesDo
	Or(conds ...gen.Condition) IUsersRolesDo
	Select(conds ...field.Expr) IUsersRolesDo
	Where(conds ...gen.Condition) IUsersRolesDo
	Order(conds ...field.Expr) IUsersRolesDo
	Distinct(cols ...field.Expr) IUsersRolesDo
	Omit(cols ...field.Expr) IUsersRolesDo
	Join(table schema.Tabler, on ...field.Expr) IUsersRolesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersRolesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersRolesDo
	Group(cols ...field.Expr) IUsersRolesDo
	Having(conds ...gen.Condition) IUsersRolesDo
	Limit(limit int) IUsersRolesDo
	Offset(offset int) IUsersRolesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersRolesDo
	Unscoped() IUsersRolesDo
	Create(values ...*model.UsersRoles) error
	CreateInBatches(values []*model.UsersRoles, batchSize int) error
	Save(values ...*model.UsersRoles) error
	First() (*model.UsersRoles, error)
	Take() (*model.UsersRoles, error)
	Last() (*model.UsersRoles, error)
	Find() ([]*model.UsersRoles, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersRoles, err error)
	FindInBatches(result *[]*model.UsersRoles, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UsersRoles) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersRolesDo
	Assign(attrs ...field.AssignExpr) IUsersRolesDo
	Joins(fields ...field.RelationField) IUsersRolesDo
	Preload(fields ...field.RelationField) IUsersRolesDo
	FirstOrInit() (*model.UsersRoles, error)
	FirstOrCreate() (*model.UsersRoles, error)
	FindByPage(offset int, limit int) (result []*model.UsersRoles, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersRolesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersRolesDo) Debug() IUsersRolesDo {
	return u.withDO(u.DO.Debug())
}

func (u usersRolesDo) WithContext(ctx context.Context) IUsersRolesDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersRolesDo) ReadDB() IUsersRolesDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersRolesDo) WriteDB() IUsersRolesDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersRolesDo) Session(config *gorm.Session) IUsersRolesDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersRolesDo) Clauses(conds ...clause.Expression) IUsersRolesDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersRolesDo) Returning(value interface{}, columns ...string) IUsersRolesDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersRolesDo) Not(conds ...gen.Condition) IUsersRolesDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersRolesDo) Or(conds ...gen.Condition) IUsersRolesDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersRolesDo) Select(conds ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersRolesDo) Where(conds ...gen.Condition) IUsersRolesDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersRolesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUsersRolesDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u usersRolesDo) Order(conds ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersRolesDo) Distinct(cols ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersRolesDo) Omit(cols ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersRolesDo) Join(table schema.Tabler, on ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersRolesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersRolesDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersRolesDo) Group(cols ...field.Expr) IUsersRolesDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersRolesDo) Having(conds ...gen.Condition) IUsersRolesDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersRolesDo) Limit(limit int) IUsersRolesDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersRolesDo) Offset(offset int) IUsersRolesDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersRolesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersRolesDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersRolesDo) Unscoped() IUsersRolesDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersRolesDo) Create(values ...*model.UsersRoles) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersRolesDo) CreateInBatches(values []*model.UsersRoles, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersRolesDo) Save(values ...*model.UsersRoles) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersRolesDo) First() (*model.UsersRoles, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersRoles), nil
	}
}

func (u usersRolesDo) Take() (*model.UsersRoles, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersRoles), nil
	}
}

func (u usersRolesDo) Last() (*model.UsersRoles, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersRoles), nil
	}
}

func (u usersRolesDo) Find() ([]*model.UsersRoles, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsersRoles), err
}

func (u usersRolesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersRoles, err error) {
	buf := make([]*model.UsersRoles, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersRolesDo) FindInBatches(result *[]*model.UsersRoles, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersRolesDo) Attrs(attrs ...field.AssignExpr) IUsersRolesDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersRolesDo) Assign(attrs ...field.AssignExpr) IUsersRolesDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersRolesDo) Joins(fields ...field.RelationField) IUsersRolesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersRolesDo) Preload(fields ...field.RelationField) IUsersRolesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersRolesDo) FirstOrInit() (*model.UsersRoles, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersRoles), nil
	}
}

func (u usersRolesDo) FirstOrCreate() (*model.UsersRoles, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersRoles), nil
	}
}

func (u usersRolesDo) FindByPage(offset int, limit int) (result []*model.UsersRoles, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersRolesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersRolesDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersRolesDo) Delete(models ...*model.UsersRoles) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersRolesDo) withDO(do gen.Dao) *usersRolesDo {
	u.DO = *do.(*gen.DO)
	return u
}
