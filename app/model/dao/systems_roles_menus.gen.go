// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/app/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRolesMenus(db *gorm.DB, opts ...gen.DOOption) rolesMenus {
	_rolesMenus := rolesMenus{}

	_rolesMenus.rolesMenusDo.UseDB(db, opts...)
	_rolesMenus.rolesMenusDo.UseModel(&model.RolesMenus{})

	tableName := _rolesMenus.rolesMenusDo.TableName()
	_rolesMenus.ALL = field.NewAsterisk(tableName)
	_rolesMenus.RoleId = field.NewUint(tableName, "role_id")
	_rolesMenus.MenuId = field.NewUint(tableName, "menu_id")

	_rolesMenus.fillFieldMap()

	return _rolesMenus
}

type rolesMenus struct {
	rolesMenusDo rolesMenusDo

	ALL    field.Asterisk
	RoleId field.Uint
	MenuId field.Uint

	fieldMap map[string]field.Expr
}

func (r rolesMenus) Table(newTableName string) *rolesMenus {
	r.rolesMenusDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rolesMenus) As(alias string) *rolesMenus {
	r.rolesMenusDo.DO = *(r.rolesMenusDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rolesMenus) updateTableName(table string) *rolesMenus {
	r.ALL = field.NewAsterisk(table)
	r.RoleId = field.NewUint(table, "role_id")
	r.MenuId = field.NewUint(table, "menu_id")

	r.fillFieldMap()

	return r
}

func (r *rolesMenus) WithContext(ctx context.Context) IRolesMenusDo {
	return r.rolesMenusDo.WithContext(ctx)
}

func (r rolesMenus) TableName() string { return r.rolesMenusDo.TableName() }

func (r rolesMenus) Alias() string { return r.rolesMenusDo.Alias() }

func (r *rolesMenus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rolesMenus) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["role_id"] = r.RoleId
	r.fieldMap["menu_id"] = r.MenuId
}

func (r rolesMenus) clone(db *gorm.DB) rolesMenus {
	r.rolesMenusDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rolesMenus) replaceDB(db *gorm.DB) rolesMenus {
	r.rolesMenusDo.ReplaceDB(db)
	return r
}

type rolesMenusDo struct{ gen.DO }

type IRolesMenusDo interface {
	gen.SubQuery
	Debug() IRolesMenusDo
	WithContext(ctx context.Context) IRolesMenusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRolesMenusDo
	WriteDB() IRolesMenusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRolesMenusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRolesMenusDo
	Not(conds ...gen.Condition) IRolesMenusDo
	Or(conds ...gen.Condition) IRolesMenusDo
	Select(conds ...field.Expr) IRolesMenusDo
	Where(conds ...gen.Condition) IRolesMenusDo
	Order(conds ...field.Expr) IRolesMenusDo
	Distinct(cols ...field.Expr) IRolesMenusDo
	Omit(cols ...field.Expr) IRolesMenusDo
	Join(table schema.Tabler, on ...field.Expr) IRolesMenusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRolesMenusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRolesMenusDo
	Group(cols ...field.Expr) IRolesMenusDo
	Having(conds ...gen.Condition) IRolesMenusDo
	Limit(limit int) IRolesMenusDo
	Offset(offset int) IRolesMenusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRolesMenusDo
	Unscoped() IRolesMenusDo
	Create(values ...*model.RolesMenus) error
	CreateInBatches(values []*model.RolesMenus, batchSize int) error
	Save(values ...*model.RolesMenus) error
	First() (*model.RolesMenus, error)
	Take() (*model.RolesMenus, error)
	Last() (*model.RolesMenus, error)
	Find() ([]*model.RolesMenus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RolesMenus, err error)
	FindInBatches(result *[]*model.RolesMenus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RolesMenus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRolesMenusDo
	Assign(attrs ...field.AssignExpr) IRolesMenusDo
	Joins(fields ...field.RelationField) IRolesMenusDo
	Preload(fields ...field.RelationField) IRolesMenusDo
	FirstOrInit() (*model.RolesMenus, error)
	FirstOrCreate() (*model.RolesMenus, error)
	FindByPage(offset int, limit int) (result []*model.RolesMenus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRolesMenusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rolesMenusDo) Debug() IRolesMenusDo {
	return r.withDO(r.DO.Debug())
}

func (r rolesMenusDo) WithContext(ctx context.Context) IRolesMenusDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rolesMenusDo) ReadDB() IRolesMenusDo {
	return r.Clauses(dbresolver.Read)
}

func (r rolesMenusDo) WriteDB() IRolesMenusDo {
	return r.Clauses(dbresolver.Write)
}

func (r rolesMenusDo) Session(config *gorm.Session) IRolesMenusDo {
	return r.withDO(r.DO.Session(config))
}

func (r rolesMenusDo) Clauses(conds ...clause.Expression) IRolesMenusDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rolesMenusDo) Returning(value interface{}, columns ...string) IRolesMenusDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rolesMenusDo) Not(conds ...gen.Condition) IRolesMenusDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rolesMenusDo) Or(conds ...gen.Condition) IRolesMenusDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rolesMenusDo) Select(conds ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rolesMenusDo) Where(conds ...gen.Condition) IRolesMenusDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rolesMenusDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRolesMenusDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r rolesMenusDo) Order(conds ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rolesMenusDo) Distinct(cols ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rolesMenusDo) Omit(cols ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rolesMenusDo) Join(table schema.Tabler, on ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rolesMenusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rolesMenusDo) RightJoin(table schema.Tabler, on ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rolesMenusDo) Group(cols ...field.Expr) IRolesMenusDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rolesMenusDo) Having(conds ...gen.Condition) IRolesMenusDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rolesMenusDo) Limit(limit int) IRolesMenusDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rolesMenusDo) Offset(offset int) IRolesMenusDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rolesMenusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRolesMenusDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rolesMenusDo) Unscoped() IRolesMenusDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rolesMenusDo) Create(values ...*model.RolesMenus) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rolesMenusDo) CreateInBatches(values []*model.RolesMenus, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rolesMenusDo) Save(values ...*model.RolesMenus) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rolesMenusDo) First() (*model.RolesMenus, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenus), nil
	}
}

func (r rolesMenusDo) Take() (*model.RolesMenus, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenus), nil
	}
}

func (r rolesMenusDo) Last() (*model.RolesMenus, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenus), nil
	}
}

func (r rolesMenusDo) Find() ([]*model.RolesMenus, error) {
	result, err := r.DO.Find()
	return result.([]*model.RolesMenus), err
}

func (r rolesMenusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RolesMenus, err error) {
	buf := make([]*model.RolesMenus, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rolesMenusDo) FindInBatches(result *[]*model.RolesMenus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rolesMenusDo) Attrs(attrs ...field.AssignExpr) IRolesMenusDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rolesMenusDo) Assign(attrs ...field.AssignExpr) IRolesMenusDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rolesMenusDo) Joins(fields ...field.RelationField) IRolesMenusDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rolesMenusDo) Preload(fields ...field.RelationField) IRolesMenusDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rolesMenusDo) FirstOrInit() (*model.RolesMenus, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenus), nil
	}
}

func (r rolesMenusDo) FirstOrCreate() (*model.RolesMenus, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenus), nil
	}
}

func (r rolesMenusDo) FindByPage(offset int, limit int) (result []*model.RolesMenus, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rolesMenusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rolesMenusDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rolesMenusDo) Delete(models ...*model.RolesMenus) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rolesMenusDo) withDO(do gen.Dao) *rolesMenusDo {
	r.DO = *do.(*gen.DO)
	return r
}
