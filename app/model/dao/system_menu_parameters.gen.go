// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/app/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMenuParameter(db *gorm.DB, opts ...gen.DOOption) menuParameter {
	_menuParameter := menuParameter{}

	_menuParameter.menuParameterDo.UseDB(db, opts...)
	_menuParameter.menuParameterDo.UseModel(&model.MenuParameter{})

	tableName := _menuParameter.menuParameterDo.TableName()
	_menuParameter.ALL = field.NewAsterisk(tableName)
	_menuParameter.ID = field.NewUint(tableName, "id")
	_menuParameter.CreatedAt = field.NewTime(tableName, "created_at")
	_menuParameter.UpdatedAt = field.NewTime(tableName, "updated_at")
	_menuParameter.DeletedAt = field.NewTime(tableName, "deleted_at")
	_menuParameter.IsDelete = field.NewField(tableName, "is_delete")
	_menuParameter.Key = field.NewString(tableName, "key")
	_menuParameter.Type = field.NewString(tableName, "type")
	_menuParameter.Value = field.NewString(tableName, "value")
	_menuParameter.MenuId = field.NewUint(tableName, "menu_id")

	_menuParameter.fillFieldMap()

	return _menuParameter
}

type menuParameter struct {
	menuParameterDo menuParameterDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Time
	IsDelete  field.Field
	Key       field.String
	Type      field.String
	Value     field.String
	MenuId    field.Uint

	fieldMap map[string]field.Expr
}

func (m menuParameter) Table(newTableName string) *menuParameter {
	m.menuParameterDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menuParameter) As(alias string) *menuParameter {
	m.menuParameterDo.DO = *(m.menuParameterDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menuParameter) updateTableName(table string) *menuParameter {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewTime(table, "deleted_at")
	m.IsDelete = field.NewField(table, "is_delete")
	m.Key = field.NewString(table, "key")
	m.Type = field.NewString(table, "type")
	m.Value = field.NewString(table, "value")
	m.MenuId = field.NewUint(table, "menu_id")

	m.fillFieldMap()

	return m
}

func (m *menuParameter) WithContext(ctx context.Context) IMenuParameterDo {
	return m.menuParameterDo.WithContext(ctx)
}

func (m menuParameter) TableName() string { return m.menuParameterDo.TableName() }

func (m menuParameter) Alias() string { return m.menuParameterDo.Alias() }

func (m *menuParameter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menuParameter) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["is_delete"] = m.IsDelete
	m.fieldMap["key"] = m.Key
	m.fieldMap["type"] = m.Type
	m.fieldMap["value"] = m.Value
	m.fieldMap["menu_id"] = m.MenuId
}

func (m menuParameter) clone(db *gorm.DB) menuParameter {
	m.menuParameterDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m menuParameter) replaceDB(db *gorm.DB) menuParameter {
	m.menuParameterDo.ReplaceDB(db)
	return m
}

type menuParameterDo struct{ gen.DO }

type IMenuParameterDo interface {
	gen.SubQuery
	Debug() IMenuParameterDo
	WithContext(ctx context.Context) IMenuParameterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMenuParameterDo
	WriteDB() IMenuParameterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMenuParameterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMenuParameterDo
	Not(conds ...gen.Condition) IMenuParameterDo
	Or(conds ...gen.Condition) IMenuParameterDo
	Select(conds ...field.Expr) IMenuParameterDo
	Where(conds ...gen.Condition) IMenuParameterDo
	Order(conds ...field.Expr) IMenuParameterDo
	Distinct(cols ...field.Expr) IMenuParameterDo
	Omit(cols ...field.Expr) IMenuParameterDo
	Join(table schema.Tabler, on ...field.Expr) IMenuParameterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMenuParameterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMenuParameterDo
	Group(cols ...field.Expr) IMenuParameterDo
	Having(conds ...gen.Condition) IMenuParameterDo
	Limit(limit int) IMenuParameterDo
	Offset(offset int) IMenuParameterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuParameterDo
	Unscoped() IMenuParameterDo
	Create(values ...*model.MenuParameter) error
	CreateInBatches(values []*model.MenuParameter, batchSize int) error
	Save(values ...*model.MenuParameter) error
	First() (*model.MenuParameter, error)
	Take() (*model.MenuParameter, error)
	Last() (*model.MenuParameter, error)
	Find() ([]*model.MenuParameter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuParameter, err error)
	FindInBatches(result *[]*model.MenuParameter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MenuParameter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMenuParameterDo
	Assign(attrs ...field.AssignExpr) IMenuParameterDo
	Joins(fields ...field.RelationField) IMenuParameterDo
	Preload(fields ...field.RelationField) IMenuParameterDo
	FirstOrInit() (*model.MenuParameter, error)
	FirstOrCreate() (*model.MenuParameter, error)
	FindByPage(offset int, limit int) (result []*model.MenuParameter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMenuParameterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m menuParameterDo) Debug() IMenuParameterDo {
	return m.withDO(m.DO.Debug())
}

func (m menuParameterDo) WithContext(ctx context.Context) IMenuParameterDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuParameterDo) ReadDB() IMenuParameterDo {
	return m.Clauses(dbresolver.Read)
}

func (m menuParameterDo) WriteDB() IMenuParameterDo {
	return m.Clauses(dbresolver.Write)
}

func (m menuParameterDo) Session(config *gorm.Session) IMenuParameterDo {
	return m.withDO(m.DO.Session(config))
}

func (m menuParameterDo) Clauses(conds ...clause.Expression) IMenuParameterDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuParameterDo) Returning(value interface{}, columns ...string) IMenuParameterDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuParameterDo) Not(conds ...gen.Condition) IMenuParameterDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuParameterDo) Or(conds ...gen.Condition) IMenuParameterDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuParameterDo) Select(conds ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuParameterDo) Where(conds ...gen.Condition) IMenuParameterDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuParameterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMenuParameterDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m menuParameterDo) Order(conds ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuParameterDo) Distinct(cols ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuParameterDo) Omit(cols ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuParameterDo) Join(table schema.Tabler, on ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuParameterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuParameterDo) RightJoin(table schema.Tabler, on ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuParameterDo) Group(cols ...field.Expr) IMenuParameterDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuParameterDo) Having(conds ...gen.Condition) IMenuParameterDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuParameterDo) Limit(limit int) IMenuParameterDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuParameterDo) Offset(offset int) IMenuParameterDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuParameterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuParameterDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuParameterDo) Unscoped() IMenuParameterDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuParameterDo) Create(values ...*model.MenuParameter) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuParameterDo) CreateInBatches(values []*model.MenuParameter, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuParameterDo) Save(values ...*model.MenuParameter) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuParameterDo) First() (*model.MenuParameter, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuParameter), nil
	}
}

func (m menuParameterDo) Take() (*model.MenuParameter, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuParameter), nil
	}
}

func (m menuParameterDo) Last() (*model.MenuParameter, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuParameter), nil
	}
}

func (m menuParameterDo) Find() ([]*model.MenuParameter, error) {
	result, err := m.DO.Find()
	return result.([]*model.MenuParameter), err
}

func (m menuParameterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuParameter, err error) {
	buf := make([]*model.MenuParameter, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuParameterDo) FindInBatches(result *[]*model.MenuParameter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuParameterDo) Attrs(attrs ...field.AssignExpr) IMenuParameterDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuParameterDo) Assign(attrs ...field.AssignExpr) IMenuParameterDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuParameterDo) Joins(fields ...field.RelationField) IMenuParameterDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m menuParameterDo) Preload(fields ...field.RelationField) IMenuParameterDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m menuParameterDo) FirstOrInit() (*model.MenuParameter, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuParameter), nil
	}
}

func (m menuParameterDo) FirstOrCreate() (*model.MenuParameter, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuParameter), nil
	}
}

func (m menuParameterDo) FindByPage(offset int, limit int) (result []*model.MenuParameter, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuParameterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m menuParameterDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m menuParameterDo) Delete(models ...*model.MenuParameter) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *menuParameterDo) withDO(do gen.Dao) *menuParameterDo {
	m.DO = *do.(*gen.DO)
	return m
}
