// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"gva-lbx/app/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRolesMenuButtons(db *gorm.DB, opts ...gen.DOOption) rolesMenuButtons {
	_rolesMenuButtons := rolesMenuButtons{}

	_rolesMenuButtons.rolesMenuButtonsDo.UseDB(db, opts...)
	_rolesMenuButtons.rolesMenuButtonsDo.UseModel(&model.RolesMenuButtons{})

	tableName := _rolesMenuButtons.rolesMenuButtonsDo.TableName()
	_rolesMenuButtons.ALL = field.NewAsterisk(tableName)
	_rolesMenuButtons.RoleId = field.NewUint(tableName, "role_id")
	_rolesMenuButtons.MenuId = field.NewUint(tableName, "menu_id")
	_rolesMenuButtons.ButtonId = field.NewUint(tableName, "button_id")

	_rolesMenuButtons.fillFieldMap()

	return _rolesMenuButtons
}

type rolesMenuButtons struct {
	rolesMenuButtonsDo rolesMenuButtonsDo

	ALL      field.Asterisk
	RoleId   field.Uint
	MenuId   field.Uint
	ButtonId field.Uint

	fieldMap map[string]field.Expr
}

func (r rolesMenuButtons) Table(newTableName string) *rolesMenuButtons {
	r.rolesMenuButtonsDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rolesMenuButtons) As(alias string) *rolesMenuButtons {
	r.rolesMenuButtonsDo.DO = *(r.rolesMenuButtonsDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rolesMenuButtons) updateTableName(table string) *rolesMenuButtons {
	r.ALL = field.NewAsterisk(table)
	r.RoleId = field.NewUint(table, "role_id")
	r.MenuId = field.NewUint(table, "menu_id")
	r.ButtonId = field.NewUint(table, "button_id")

	r.fillFieldMap()

	return r
}

func (r *rolesMenuButtons) WithContext(ctx context.Context) IRolesMenuButtonsDo {
	return r.rolesMenuButtonsDo.WithContext(ctx)
}

func (r rolesMenuButtons) TableName() string { return r.rolesMenuButtonsDo.TableName() }

func (r rolesMenuButtons) Alias() string { return r.rolesMenuButtonsDo.Alias() }

func (r *rolesMenuButtons) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rolesMenuButtons) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["role_id"] = r.RoleId
	r.fieldMap["menu_id"] = r.MenuId
	r.fieldMap["button_id"] = r.ButtonId
}

func (r rolesMenuButtons) clone(db *gorm.DB) rolesMenuButtons {
	r.rolesMenuButtonsDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rolesMenuButtons) replaceDB(db *gorm.DB) rolesMenuButtons {
	r.rolesMenuButtonsDo.ReplaceDB(db)
	return r
}

type rolesMenuButtonsDo struct{ gen.DO }

type IRolesMenuButtonsDo interface {
	gen.SubQuery
	Debug() IRolesMenuButtonsDo
	WithContext(ctx context.Context) IRolesMenuButtonsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRolesMenuButtonsDo
	WriteDB() IRolesMenuButtonsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRolesMenuButtonsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRolesMenuButtonsDo
	Not(conds ...gen.Condition) IRolesMenuButtonsDo
	Or(conds ...gen.Condition) IRolesMenuButtonsDo
	Select(conds ...field.Expr) IRolesMenuButtonsDo
	Where(conds ...gen.Condition) IRolesMenuButtonsDo
	Order(conds ...field.Expr) IRolesMenuButtonsDo
	Distinct(cols ...field.Expr) IRolesMenuButtonsDo
	Omit(cols ...field.Expr) IRolesMenuButtonsDo
	Join(table schema.Tabler, on ...field.Expr) IRolesMenuButtonsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRolesMenuButtonsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRolesMenuButtonsDo
	Group(cols ...field.Expr) IRolesMenuButtonsDo
	Having(conds ...gen.Condition) IRolesMenuButtonsDo
	Limit(limit int) IRolesMenuButtonsDo
	Offset(offset int) IRolesMenuButtonsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRolesMenuButtonsDo
	Unscoped() IRolesMenuButtonsDo
	Create(values ...*model.RolesMenuButtons) error
	CreateInBatches(values []*model.RolesMenuButtons, batchSize int) error
	Save(values ...*model.RolesMenuButtons) error
	First() (*model.RolesMenuButtons, error)
	Take() (*model.RolesMenuButtons, error)
	Last() (*model.RolesMenuButtons, error)
	Find() ([]*model.RolesMenuButtons, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RolesMenuButtons, err error)
	FindInBatches(result *[]*model.RolesMenuButtons, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RolesMenuButtons) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRolesMenuButtonsDo
	Assign(attrs ...field.AssignExpr) IRolesMenuButtonsDo
	Joins(fields ...field.RelationField) IRolesMenuButtonsDo
	Preload(fields ...field.RelationField) IRolesMenuButtonsDo
	FirstOrInit() (*model.RolesMenuButtons, error)
	FirstOrCreate() (*model.RolesMenuButtons, error)
	FindByPage(offset int, limit int) (result []*model.RolesMenuButtons, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRolesMenuButtonsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rolesMenuButtonsDo) Debug() IRolesMenuButtonsDo {
	return r.withDO(r.DO.Debug())
}

func (r rolesMenuButtonsDo) WithContext(ctx context.Context) IRolesMenuButtonsDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rolesMenuButtonsDo) ReadDB() IRolesMenuButtonsDo {
	return r.Clauses(dbresolver.Read)
}

func (r rolesMenuButtonsDo) WriteDB() IRolesMenuButtonsDo {
	return r.Clauses(dbresolver.Write)
}

func (r rolesMenuButtonsDo) Session(config *gorm.Session) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Session(config))
}

func (r rolesMenuButtonsDo) Clauses(conds ...clause.Expression) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rolesMenuButtonsDo) Returning(value interface{}, columns ...string) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rolesMenuButtonsDo) Not(conds ...gen.Condition) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rolesMenuButtonsDo) Or(conds ...gen.Condition) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rolesMenuButtonsDo) Select(conds ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rolesMenuButtonsDo) Where(conds ...gen.Condition) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rolesMenuButtonsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRolesMenuButtonsDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r rolesMenuButtonsDo) Order(conds ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rolesMenuButtonsDo) Distinct(cols ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rolesMenuButtonsDo) Omit(cols ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rolesMenuButtonsDo) Join(table schema.Tabler, on ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rolesMenuButtonsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rolesMenuButtonsDo) RightJoin(table schema.Tabler, on ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rolesMenuButtonsDo) Group(cols ...field.Expr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rolesMenuButtonsDo) Having(conds ...gen.Condition) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rolesMenuButtonsDo) Limit(limit int) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rolesMenuButtonsDo) Offset(offset int) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rolesMenuButtonsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rolesMenuButtonsDo) Unscoped() IRolesMenuButtonsDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rolesMenuButtonsDo) Create(values ...*model.RolesMenuButtons) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rolesMenuButtonsDo) CreateInBatches(values []*model.RolesMenuButtons, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rolesMenuButtonsDo) Save(values ...*model.RolesMenuButtons) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rolesMenuButtonsDo) First() (*model.RolesMenuButtons, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenuButtons), nil
	}
}

func (r rolesMenuButtonsDo) Take() (*model.RolesMenuButtons, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenuButtons), nil
	}
}

func (r rolesMenuButtonsDo) Last() (*model.RolesMenuButtons, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenuButtons), nil
	}
}

func (r rolesMenuButtonsDo) Find() ([]*model.RolesMenuButtons, error) {
	result, err := r.DO.Find()
	return result.([]*model.RolesMenuButtons), err
}

func (r rolesMenuButtonsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RolesMenuButtons, err error) {
	buf := make([]*model.RolesMenuButtons, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rolesMenuButtonsDo) FindInBatches(result *[]*model.RolesMenuButtons, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rolesMenuButtonsDo) Attrs(attrs ...field.AssignExpr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rolesMenuButtonsDo) Assign(attrs ...field.AssignExpr) IRolesMenuButtonsDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rolesMenuButtonsDo) Joins(fields ...field.RelationField) IRolesMenuButtonsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rolesMenuButtonsDo) Preload(fields ...field.RelationField) IRolesMenuButtonsDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rolesMenuButtonsDo) FirstOrInit() (*model.RolesMenuButtons, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenuButtons), nil
	}
}

func (r rolesMenuButtonsDo) FirstOrCreate() (*model.RolesMenuButtons, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RolesMenuButtons), nil
	}
}

func (r rolesMenuButtonsDo) FindByPage(offset int, limit int) (result []*model.RolesMenuButtons, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rolesMenuButtonsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rolesMenuButtonsDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rolesMenuButtonsDo) Delete(models ...*model.RolesMenuButtons) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rolesMenuButtonsDo) withDO(do gen.Dao) *rolesMenuButtonsDo {
	r.DO = *do.(*gen.DO)
	return r
}
