// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt          *Jwt           `protobuf:"bytes,1,opt,name=Jwt,proto3" json:"Jwt,omitempty"`
	Zap          *Zap           `protobuf:"bytes,2,opt,name=Zap,proto3" json:"Zap,omitempty"`
	Gorm         *Gorm          `protobuf:"bytes,3,opt,name=Gorm,proto3" json:"Gorm,omitempty"`
	Redis        *Redis         `protobuf:"bytes,4,opt,name=Redis,proto3" json:"Redis,omitempty"`
	Mongo        *Mongo         `protobuf:"bytes,5,opt,name=Mongo,proto3" json:"Mongo,omitempty"`
	System       *System        `protobuf:"bytes,6,opt,name=System,proto3" json:"System,omitempty"`
	Captcha      *Captcha       `protobuf:"bytes,7,opt,name=Captcha,proto3" json:"Captcha,omitempty"`
	GormList     []*GormList    `protobuf:"bytes,8,rep,name=GormList,proto3" json:"GormList,omitempty"`
	GormReplicas []*GormReplica `protobuf:"bytes,9,rep,name=GormReplicas,proto3" json:"GormReplicas,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetJwt() *Jwt {
	if x != nil {
		return x.Jwt
	}
	return nil
}

func (x *Config) GetZap() *Zap {
	if x != nil {
		return x.Zap
	}
	return nil
}

func (x *Config) GetGorm() *Gorm {
	if x != nil {
		return x.Gorm
	}
	return nil
}

func (x *Config) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Config) GetMongo() *Mongo {
	if x != nil {
		return x.Mongo
	}
	return nil
}

func (x *Config) GetSystem() *System {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Config) GetCaptcha() *Captcha {
	if x != nil {
		return x.Captcha
	}
	return nil
}

func (x *Config) GetGormList() []*GormList {
	if x != nil {
		return x.GormList
	}
	return nil
}

func (x *Config) GetGormReplicas() []*GormReplica {
	if x != nil {
		return x.GormReplicas
	}
	return nil
}

// Jwt json web token config
type Jwt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issuer 签发者
	Issuer string `protobuf:"bytes,1,opt,name=Issuer,proto3" json:"Issuer,omitempty"`
	// SigningKey jwt签名
	SigningKey string `protobuf:"bytes,2,opt,name=SigningKey,proto3" json:"SigningKey,omitempty"`
	// BufferAt 缓冲时间
	BufferAt string `protobuf:"bytes,3,opt,name=BufferAt,proto3" json:"BufferAt,omitempty"`
	// ExpiresAt 过期时间
	ExpiresAt string `protobuf:"bytes,4,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
}

func (x *Jwt) Reset() {
	*x = Jwt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jwt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jwt) ProtoMessage() {}

func (x *Jwt) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jwt.ProtoReflect.Descriptor instead.
func (*Jwt) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Jwt) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Jwt) GetSigningKey() string {
	if x != nil {
		return x.SigningKey
	}
	return ""
}

func (x *Jwt) GetBufferAt() string {
	if x != nil {
		return x.BufferAt
	}
	return ""
}

func (x *Jwt) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

// Zap zap logger config
type Zap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level 级别
	Level string `protobuf:"bytes,1,opt,name=Level,proto3" json:"Level,omitempty"`
	// Prefix 日志前缀
	Prefix string `protobuf:"bytes,2,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// Format 输出
	Format string `protobuf:"bytes,3,opt,name=Format,proto3" json:"Format,omitempty"`
	// Director 日志文件夹
	Director string `protobuf:"bytes,4,opt,name=Director,proto3" json:"Director,omitempty"`
	// EncodeLevel 编码级
	EncodeLevel string `protobuf:"bytes,5,opt,name=EncodeLevel,proto3" json:"EncodeLevel,omitempty"`
	// StacktraceKey 栈名
	StacktraceKey string `protobuf:"bytes,6,opt,name=StacktraceKey,proto3" json:"StacktraceKey,omitempty"`
	// MaxAge 日志留存时间
	MaxAge int64 `protobuf:"varint,7,opt,name=MaxAge,proto3" json:"MaxAge,omitempty"`
	// ShowLine 显示行
	ShowLine bool `protobuf:"varint,8,opt,name=ShowLine,proto3" json:"ShowLine,omitempty"`
	// LogInConsole 输出控制台
	LogInConsole bool `protobuf:"varint,9,opt,name=LogInConsole,proto3" json:"LogInConsole,omitempty"`
}

func (x *Zap) Reset() {
	*x = Zap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zap) ProtoMessage() {}

func (x *Zap) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zap.ProtoReflect.Descriptor instead.
func (*Zap) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Zap) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Zap) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Zap) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Zap) GetDirector() string {
	if x != nil {
		return x.Director
	}
	return ""
}

func (x *Zap) GetEncodeLevel() string {
	if x != nil {
		return x.EncodeLevel
	}
	return ""
}

func (x *Zap) GetStacktraceKey() string {
	if x != nil {
		return x.StacktraceKey
	}
	return ""
}

func (x *Zap) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *Zap) GetShowLine() bool {
	if x != nil {
		return x.ShowLine
	}
	return false
}

func (x *Zap) GetLogInConsole() bool {
	if x != nil {
		return x.LogInConsole
	}
	return false
}

// Redis redis config
type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level 数据库
	DB uint64 `protobuf:"varint,1,opt,name=DB,proto3" json:"DB,omitempty"`
	// Address 地址
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	// Prefix 用户名
	Username string `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	// Password 密码
	Password string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *Redis) Reset() {
	*x = Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *Redis) GetDB() uint64 {
	if x != nil {
		return x.DB
	}
	return 0
}

func (x *Redis) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Mongo mongodb config
type Mongo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Coll collection name
	Coll string `protobuf:"bytes,1,opt,name=Coll,proto3" json:"Coll,omitempty"`
	// Options mongodb options
	Options string `protobuf:"bytes,2,opt,name=Options,proto3" json:"Options,omitempty"`
	// Database database name
	Database string `protobuf:"bytes,3,opt,name=Database,proto3" json:"Database,omitempty"`
	// Username 用户名
	Username string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	// Password 密码
	Password string `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
	// MinPoolSize 最小连接池
	MinPoolSize uint64 `protobuf:"varint,6,opt,name=MinPoolSize,proto3" json:"MinPoolSize,omitempty"`
	// MaxPoolSize 最大连接池
	MaxPoolSize uint64 `protobuf:"varint,7,opt,name=MaxPoolSize,proto3" json:"MaxPoolSize,omitempty"`
	// MaxConnIdleTime 最大连接空闲时间
	SocketTimeoutMS int64 `protobuf:"varint,8,opt,name=SocketTimeoutMS,proto3" json:"SocketTimeoutMS,omitempty"`
	// SocketTimeoutMS socket超时时间
	ConnectTimeoutMS int64 `protobuf:"varint,9,opt,name=ConnectTimeoutMS,proto3" json:"ConnectTimeoutMS,omitempty"`
	// Host
	Hosts []*MongoHost `protobuf:"bytes,10,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
}

func (x *Mongo) Reset() {
	*x = Mongo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mongo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mongo) ProtoMessage() {}

func (x *Mongo) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mongo.ProtoReflect.Descriptor instead.
func (*Mongo) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *Mongo) GetColl() string {
	if x != nil {
		return x.Coll
	}
	return ""
}

func (x *Mongo) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *Mongo) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Mongo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Mongo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Mongo) GetMinPoolSize() uint64 {
	if x != nil {
		return x.MinPoolSize
	}
	return 0
}

func (x *Mongo) GetMaxPoolSize() uint64 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *Mongo) GetSocketTimeoutMS() int64 {
	if x != nil {
		return x.SocketTimeoutMS
	}
	return 0
}

func (x *Mongo) GetConnectTimeoutMS() int64 {
	if x != nil {
		return x.ConnectTimeoutMS
	}
	return 0
}

func (x *Mongo) GetHosts() []*MongoHost {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// System 系统配置
type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port 端口值
	Port int64 `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	// Language 语言
	Language string `protobuf:"bytes,2,opt,name=Language,proto3" json:"Language,omitempty"`
	// UseMultipoint 多点登录拦截
	UseMultipoint bool `protobuf:"varint,3,opt,name=UseMultipoint,proto3" json:"UseMultipoint,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *System) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *System) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *System) GetUseMultipoint() bool {
	if x != nil {
		return x.UseMultipoint
	}
	return false
}

// Captcha 验证码配置
type Captcha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KeyLong 验证码长度
	KeyLong int64 `protobuf:"varint,1,opt,name=KeyLong,proto3" json:"KeyLong,omitempty"`
	// ImageWidth 图片宽度
	ImageWidth int64 `protobuf:"varint,2,opt,name=ImageWidth,proto3" json:"ImageWidth,omitempty"`
	// ImageHeight 图片高度
	ImageHeight int64 `protobuf:"varint,3,opt,name=ImageHeight,proto3" json:"ImageHeight,omitempty"`
	// CacheTimeout 缓存超时时间
	CacheTimeout string `protobuf:"bytes,4,opt,name=CacheTimeout,proto3" json:"CacheTimeout,omitempty"`
	// ExplosionProof 防爆次数
	ExplosionProof int64 `protobuf:"varint,5,opt,name=ExplosionProof,proto3" json:"ExplosionProof,omitempty"`
}

func (x *Captcha) Reset() {
	*x = Captcha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Captcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Captcha) ProtoMessage() {}

func (x *Captcha) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Captcha.ProtoReflect.Descriptor instead.
func (*Captcha) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *Captcha) GetKeyLong() int64 {
	if x != nil {
		return x.KeyLong
	}
	return 0
}

func (x *Captcha) GetImageWidth() int64 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *Captcha) GetImageHeight() int64 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *Captcha) GetCacheTimeout() string {
	if x != nil {
		return x.CacheTimeout
	}
	return ""
}

func (x *Captcha) GetExplosionProof() int64 {
	if x != nil {
		return x.ExplosionProof
	}
	return 0
}

// Host mongodb host
type MongoHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host ip地址
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	// Port 端口
	Port string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *MongoHost) Reset() {
	*x = MongoHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoHost) ProtoMessage() {}

func (x *MongoHost) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoHost.ProtoReflect.Descriptor instead.
func (*MongoHost) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *MongoHost) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MongoHost) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

// Gorm gorm database config
type Gorm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type 数据库类型
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Host 数据库地址
	Host string `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	// Port 数据库端口
	Port int64 `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	// Config 数据库其他配置
	Config string `protobuf:"bytes,4,opt,name=Config,proto3" json:"Config,omitempty"`
	// Dbname 数据库名
	Dbname string `protobuf:"bytes,5,opt,name=Dbname,proto3" json:"Dbname,omitempty"`
	// Username 数据库用户名
	Username string `protobuf:"bytes,6,opt,name=Username,proto3" json:"Username,omitempty"`
	// Password 数据库密码
	Password string `protobuf:"bytes,7,opt,name=Password,proto3" json:"Password,omitempty"`
	// MaxIdleCones 最大空闲连接数
	MaxIdleCones int64 `protobuf:"varint,8,opt,name=MaxIdleCones,proto3" json:"MaxIdleCones,omitempty"`
	// MaxOpenCones 最大打开连接数
	MaxOpenCones int64 `protobuf:"varint,9,opt,name=MaxOpenCones,proto3" json:"MaxOpenCones,omitempty"`
	// ConnMaxLifetime 连接最大存活时间
	ConnMaxLifetime int64 `protobuf:"varint,10,opt,name=ConnMaxLifetime,proto3" json:"ConnMaxLifetime,omitempty"`
	// ConnMaxIdleTime 连接最大空闲时间
	ConnMaxIdleTime int64 `protobuf:"varint,11,opt,name=ConnMaxIdleTime,proto3" json:"ConnMaxIdleTime,omitempty"`
	// Config 其他配置
	OtherConfig *GormConfig `protobuf:"bytes,12,opt,name=OtherConfig,proto3" json:"OtherConfig,omitempty"`
	// Replicas 从库配置
	Replicas []*GormReplica `protobuf:"bytes,13,rep,name=Replicas,proto3" json:"Replicas,omitempty"`
}

func (x *Gorm) Reset() {
	*x = Gorm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gorm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gorm) ProtoMessage() {}

func (x *Gorm) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gorm.ProtoReflect.Descriptor instead.
func (*Gorm) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *Gorm) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Gorm) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Gorm) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Gorm) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Gorm) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *Gorm) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Gorm) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Gorm) GetMaxIdleCones() int64 {
	if x != nil {
		return x.MaxIdleCones
	}
	return 0
}

func (x *Gorm) GetMaxOpenCones() int64 {
	if x != nil {
		return x.MaxOpenCones
	}
	return 0
}

func (x *Gorm) GetConnMaxLifetime() int64 {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return 0
}

func (x *Gorm) GetConnMaxIdleTime() int64 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *Gorm) GetOtherConfig() *GormConfig {
	if x != nil {
		return x.OtherConfig
	}
	return nil
}

type GormConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LogZap 日志是否进入zap
	LogZap bool `protobuf:"varint,1,opt,name=LogZap,proto3" json:"LogZap,omitempty"`
	// Colorful 是否彩色
	Colorful bool `protobuf:"varint,2,opt,name=Colorful,proto3" json:"Colorful,omitempty"`
	// LogMode 日志级别(1:silent,2:error,3:warn,4:info)
	LogLevel int64 `protobuf:"varint,3,opt,name=LogLevel,proto3" json:"LogLevel,omitempty"`
	// SlowThreshold 慢查询阈值(支持秒[s],分[m],时[h],天[d])
	SlowThreshold string `protobuf:"bytes,4,opt,name=SlowThreshold,proto3" json:"SlowThreshold,omitempty"`
	// IgnoreRecordNotFoundError 忽略记录未找到错误
	IgnoreRecordNotFoundError bool `protobuf:"varint,5,opt,name=IgnoreRecordNotFoundError,proto3" json:"IgnoreRecordNotFoundError,omitempty"`
}

func (x *GormConfig) Reset() {
	*x = GormConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GormConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GormConfig) ProtoMessage() {}

func (x *GormConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GormConfig.ProtoReflect.Descriptor instead.
func (*GormConfig) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *GormConfig) GetLogZap() bool {
	if x != nil {
		return x.LogZap
	}
	return false
}

func (x *GormConfig) GetColorful() bool {
	if x != nil {
		return x.Colorful
	}
	return false
}

func (x *GormConfig) GetLogLevel() int64 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *GormConfig) GetSlowThreshold() string {
	if x != nil {
		return x.SlowThreshold
	}
	return ""
}

func (x *GormConfig) GetIgnoreRecordNotFoundError() bool {
	if x != nil {
		return x.IgnoreRecordNotFoundError
	}
	return false
}

// GormReplica 从库配置
type GormReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port 数据库端口
	Port int64 `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	// Host 数据库地址
	Host string `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	// Config 数据库其他配置
	Config string `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	// Dbname 数据库名
	Dbname string `protobuf:"bytes,4,opt,name=Dbname,proto3" json:"Dbname,omitempty"`
	// Username 数据库用户名
	Username string `protobuf:"bytes,5,opt,name=Username,proto3" json:"Username,omitempty"`
	// Password 数据库密码
	Password string `protobuf:"bytes,6,opt,name=Password,proto3" json:"Password,omitempty"`
	// Data 绑定数据表
	Data []string `protobuf:"bytes,7,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GormReplica) Reset() {
	*x = GormReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GormReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GormReplica) ProtoMessage() {}

func (x *GormReplica) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GormReplica.ProtoReflect.Descriptor instead.
func (*GormReplica) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *GormReplica) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GormReplica) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GormReplica) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *GormReplica) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *GormReplica) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GormReplica) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GormReplica) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type GormList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Disable   bool   `protobuf:"varint,2,opt,name=Disable,proto3" json:"Disable,omitempty"`
	AliasName string `protobuf:"bytes,3,opt,name=AliasName,proto3" json:"AliasName,omitempty"`
	Gorm      *Gorm  `protobuf:"bytes,4,opt,name=Gorm,proto3" json:"Gorm,omitempty"`
}

func (x *GormList) Reset() {
	*x = GormList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GormList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GormList) ProtoMessage() {}

func (x *GormList) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GormList.ProtoReflect.Descriptor instead.
func (*GormList) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *GormList) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GormList) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *GormList) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *GormList) GetGorm() *Gorm {
	if x != nil {
		return x.Gorm
	}
	return nil
}

var File_config_config_proto protoreflect.FileDescriptor

var file_config_config_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xec, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x03, 0x4a, 0x77, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a,
	0x77, 0x74, 0x52, 0x03, 0x4a, 0x77, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x5a, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x5a, 0x61,
	0x70, 0x52, 0x03, 0x5a, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x47, 0x6f, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6f,
	0x72, 0x6d, 0x52, 0x04, 0x47, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x23, 0x0a,
	0x05, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x52, 0x05, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x07, 0x43, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x2c, 0x0a, 0x08, 0x47, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x47, 0x6f, 0x72, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x47, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x0c,
	0x47, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x77, 0x0a, 0x03,
	0x4a, 0x77, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x03, 0x5a, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x22,
	0x69, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x44, 0x42, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x44, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x05, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x69, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d,
	0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x53, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x53, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x53,
	0x12, 0x27, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x06, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x55, 0x73, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x07, 0x43, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x33, 0x0a,
	0x09, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x04, 0x47, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x4d,
	0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x6e,
	0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6f, 0x72, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x47, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x5a, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x4c, 0x6f, 0x67, 0x5a, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x66, 0x75, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x47, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x08, 0x47, 0x6f, 0x72, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x04, 0x47, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x47, 0x6f,
	0x72, 0x6d, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_config_proto_rawDescOnce sync.Once
	file_config_config_proto_rawDescData = file_config_config_proto_rawDesc
)

func file_config_config_proto_rawDescGZIP() []byte {
	file_config_config_proto_rawDescOnce.Do(func() {
		file_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_config_proto_rawDescData)
	})
	return file_config_config_proto_rawDescData
}

var file_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_config_config_proto_goTypes = []interface{}{
	(*Config)(nil),      // 0: config.Config
	(*Jwt)(nil),         // 1: config.Jwt
	(*Zap)(nil),         // 2: config.Zap
	(*Redis)(nil),       // 3: config.Redis
	(*Mongo)(nil),       // 4: config.Mongo
	(*System)(nil),      // 5: config.System
	(*Captcha)(nil),     // 6: config.Captcha
	(*MongoHost)(nil),   // 7: config.MongoHost
	(*Gorm)(nil),        // 8: config.Gorm
	(*GormConfig)(nil),  // 9: config.GormConfig
	(*GormReplica)(nil), // 10: config.GormReplica
	(*GormList)(nil),    // 11: config.GormList
}
var file_config_config_proto_depIdxs = []int32{
	1,  // 0: config.Config.Jwt:type_name -> config.Jwt
	2,  // 1: config.Config.Zap:type_name -> config.Zap
	8,  // 2: config.Config.Gorm:type_name -> config.Gorm
	3,  // 3: config.Config.Redis:type_name -> config.Redis
	4,  // 4: config.Config.Mongo:type_name -> config.Mongo
	5,  // 5: config.Config.System:type_name -> config.System
	6,  // 6: config.Config.Captcha:type_name -> config.Captcha
	11, // 7: config.Config.GormList:type_name -> config.GormList
	10, // 8: config.Config.GormReplicas:type_name -> config.GormReplica
	7,  // 9: config.Mongo.Hosts:type_name -> config.MongoHost
	9,  // 10: config.Gorm.OtherConfig:type_name -> config.GormConfig
	8,  // 11: config.GormList.Gorm:type_name -> config.Gorm
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_config_config_proto_init() }
func file_config_config_proto_init() {
	if File_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jwt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mongo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Captcha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gorm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GormConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GormReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GormList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_config_proto_goTypes,
		DependencyIndexes: file_config_config_proto_depIdxs,
		MessageInfos:      file_config_config_proto_msgTypes,
	}.Build()
	File_config_config_proto = out.File
	file_config_config_proto_rawDesc = nil
	file_config_config_proto_goTypes = nil
	file_config_config_proto_depIdxs = nil
}
